name: "CI/CD Service"

on:
  workflow_dispatch:
    inputs:
      entornos:
        description: "¿En qué entorno quieres desplegarlo?"
        required: true
        default: development
        type: choice
        options:
          - development
          - production

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v2

      - name: Establecer Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login en Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Crear y subir imagen Docker
        run: |
          docker compose -f docker-compose.yml build web
          docker tag mi-appweb:latest khalifi11/mi-appweb:latest
          docker push khalifi11/mi-appweb:latest

  deploy-dev:
    if: github.ref == 'refs/heads/main' && (github.event_name != 'workflow_dispatch' || github.event.inputs.entornos == 'development')
    needs: build
    runs-on: [self-hosted, windows]
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v2

      - name: Aplicar deployment con kubectl
        run: |
          kubectl apply -f ./k8s/deployment.yml

  deploy-prod:
    if: github.ref == 'refs/heads/main' && (github.event_name != 'workflow_dispatch' || github.event.inputs.entornos == 'production')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Desplegar en EC2 con Docker y Nginx
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.HOST }}
          key: ${{ secrets.SSH_KEY }}
          script: |
              set -e
    
              # Actualizar e instalar herramientas necesarias en Amazon Linux
              sudo yum update -y
              sudo yum install -y git docker httpd certbot python3-certbot-apache
    
              # Habilitar y arrancar servicios
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo systemctl enable httpd
              sudo systemctl start httpd
    
              # Instalar Docker Compose v2
              sudo mkdir -p /usr/local/lib/docker/cli-plugins
              sudo curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
              sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
    
              # Añadir usuario actual al grupo docker
              sudo usermod -aG docker $USER || true
    
              # Clonar o actualizar el proyecto
              if [ ! -d "mi-app" ]; then
                git clone https://github.com/HamzaAmraoui/TFG mi-app
              fi
    
              cd mi-app
              git fetch --all
              git reset --hard origin/main
    
              # Desplegar nueva imagen Docker
              sudo docker pull khalifi11/mi-appweb:latest
              sudo docker compose down || true
              sudo docker compose up -d
    
              # Configurar Apache para proxy inverso a contenedor en puerto 3000
              sudo tee /etc/httpd/conf.d/mi-app.conf > /dev/null <<EOF
              <VirtualHost *:80>
                  ServerName hamraouielkhalifi.xyz
              
                  ProxyPreserveHost On
                  ProxyPass / http://localhost:8080/
                  ProxyPassReverse / http://localhost:8080/
              
                  ErrorLog /var/log/httpd/mi-app-error.log
                  CustomLog /var/log/httpd/mi-app-access.log combined
              </VirtualHost>
              EOF
    
              sudo systemctl restart httpd
    
              # Ejecutar Certbot para obtener y configurar HTTPS automáticamente
              # Control para evitar múltiples instancias
              if pgrep certbot > /dev/null; then
                echo "Certbot ya está en ejecución, no se ejecutará otra instancia."
              else
                sudo certbot --apache --non-interactive --agree-tos --email hamzafuego2@gmail.com -d hamraouielkhalifi.xyz
                sudo certbot renew --dry-run
              fi
    
              sudo systemctl reload httpd
              sudo certbot renew --dry-run
               
