name: "CI/CD Service"

on:
  workflow_dispatch:
    inputs:
      entornos:
        description: "¿En qué entorno quieres desplegarlo?"
        required: true
        default: development
        type: choice
        options:
          - development
          - production

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v2

      - name: Establecer Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login en Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Crear y subir imagen Docker
        run: |
          docker compose -f docker-compose.yml build web
          docker tag mi-appweb:latest khalifi11/mi-appweb:latest
          docker push khalifi11/mi-appweb:latest

  deploy-dev:
    if: github.ref == 'refs/heads/main' && (github.event_name != 'workflow_dispatch' || github.event.inputs.entornos == 'development')
    needs: build
    runs-on: [self-hosted, windows]
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v2

      - name: Aplicar deployment con kubectl
        run: |
          kubectl apply -f ./k8s/deployment.yml

  deploy-prod:
    if: github.ref == 'refs/heads/main' && (github.event_name != 'workflow_dispatch' || github.event.inputs.entornos == 'production')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Desplegar en EC2 con Docker y Nginx
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.HOST }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e

            # Actualizar e instalar herramientas necesarias en Amazon Linux
            sudo yum update -y
            sudo yum install -y git docker nginx certbot python3-certbot-nginx

            # Habilitar servicios
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo systemctl enable nginx
            sudo systemctl start nginx

            # Instalar Docker Compose v2
            sudo mkdir -p /usr/local/lib/docker/cli-plugins
            sudo curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
            sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose

            # Añadir usuario actual al grupo docker
            sudo usermod -aG docker $USER || true

            # Clonar o actualizar el proyecto
            if [ ! -d "mi-app" ]; then
              git clone https://github.com/HamzaAmraoui/TFG mi-app
            fi

            cd mi-app
            git fetch --all
            git reset --hard origin/main

            # Desplegar nueva imagen
            docker pull khalifi11/mi-appweb:latest
            docker compose down || true
            docker compose up -d

            # Configurar NGINX para redirigir HTTP a HTTPS (temporal para certbot)
            sudo tee /etc/nginx/conf.d/mi-app.conf > /dev/null <<EOF
            server {
                listen 80;
                server_name hamraouielkhalifi.xyz;
            
                location / {
                    return 301 https://\$host\$request_uri;
                }
            }
            EOF
            
                        sudo nginx -t && sudo systemctl reload nginx
            
                        # Ejecutar Certbot para obtener/renovar certificados
                        if pgrep certbot > /dev/null; then
                          echo "Certbot ya está en ejecución, no se ejecutará otra instancia."
                        else
                          sudo certbot --nginx --non-interactive --agree-tos --email hamzafuego2@gmail.com -d hamraouielkhalifi.xyz
                        fi
            
                        # Configurar NGINX con HTTPS y proxy_pass
                        sudo tee /etc/nginx/conf.d/mi-app.conf > /dev/null <<EOF
            server {
                listen 80;
                server_name hamraouielkhalifi.xyz;
                return 301 https://\$host\$request_uri;
            }
            
            server {
                listen 443 ssl http2;
                server_name hamraouielkhalifi.xyz;
            
                ssl_certificate /etc/letsencrypt/live/hamraouielkhalifi.xyz/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/hamraouielkhalifi.xyz/privkey.pem;
                include /etc/letsencrypt/options-ssl-nginx.conf;
                ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
            
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOF

            sudo nginx -t && sudo systemctl reload nginx

            # Prueba de renovación de certificados (dry-run)
            sudo certbot renew --dry-run
